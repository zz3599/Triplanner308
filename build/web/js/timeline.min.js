var Timeline = function(container, date) {
    this.WAYPOINTTEMPLATE = '<li class="ui-state-default"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span><input type="text" class="settingInput2" value="{{location}}" name="locations[]" /><button type="button" class="deletestop">delete</button></li>';
    this.tripid = -1;//the id of the trip this timeline is showing
    this.periodstart = null;
    this.periodend = null; //the start and end times of the trip
    this.daysPerMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    this.weekDays = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
    this.monthsOfYear = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    this.dayNumbers = {
        "sunday": 0,
        "monday": 1,
        "tuesday": 2,
        "wednesday": 3,
        "thursday": 4,
        "friday": 5,
        "saturday": 6
    };
    this.initialize = function() {
        this.isIE6 = (navigator.appName === 'Microsoft Internet Explorer');
        this.container = $("#" + container);
        if (!this.container.length) {
            alert("can not locate container element \"" + container + "\"!");
            return;
        }
        this.bubble = new Timeline.Bubble(this);
        this.date = (date) ? date : new Date();
        this.periodstart = new Date(this.date.getTime());
        this.periodend = new Date(this.date.getTime());
        this.events = [];
        this.placeHolders = this.setupPlaceHolders();
        this.container.addClass("timeline");
        this.render();
    };
    /**
     * Update only the interval - this is to refresh timeline after the trip is edited
     */
    this.updateInterval = function(start, end) {
        this.periodstart = start;
        this.periodend = end;
        this.date = new Date(start.getTime());
        this.render();
    };
    this.updateIntervalAndEvents = function(start, end, tripid, events) {
        this.periodstart = start;
        this.periodend = end;
        this.tripid = tripid;
        this.date = new Date(start.getTime());
        this.events = [];

        for (var i = 0; i < events.length; i++) {
            this.addEvent(events[i]);
        }
        this.render();
    };
    this.addEvent = function(event) {
        var format = function(date) {
            return date.toTimeString().split(' ')[0];
        };
        var date = new Date(event.startTime);
        var enddate = new Date(event.endTime);
        var newevent = {
            name: format(date) + '-' + format(enddate),
            date: date,
            day: date.getDate(),
            month: date.getMonth(),
            year: date.getFullYear(),
            content: event.comment,
            location: event.startLocation + (!event.endLocation ? '' : (' to ' + event.endLocation)),
            eventid: event.id,
            tripdayid: event.tripdayid,
            startLocation: event.startLocation,
            endLocation: event.endLocation
        };
        this.events.push(newevent);
        //insertio sort to put the events in chronological order
        var j, tmp, events = this.events;
        for (var i = 1; i < events.length; i++) {
            tmp = this.events[i];
            for (j = i; j > 0 && events[j - 1].date > tmp.date; j--)
                events[j] = events[j - 1];
            events[j] = tmp;
        }
    };
    this.render = function() {
        this.placeHolders.arrows.empty();
        this.placeHolders.top.empty();
        this.placeHolders.bottom.empty();
        var monthRepresentation = this.getMonthRepresentation();
        for (var i = 0; i < monthRepresentation.length; i++)
            this.renderDay(this.placeHolders.top, this.placeHolders.bottom, monthRepresentation[i]);
        if (this.isIE6)
            this.handleIE6Issues();
        this.setupArrows();
    };
    this.handleIE6Issues = function() {
        var clone = this.placeHolders.top.clone(true);
        this.container.append(clone);
        clone.css({
            left: "-1000px",
            top: "-1000px"
        });
        var width = clone.outerWidth();
        clone.remove();
        this.placeHolders.top.css({
            width: width + "px"
        });
        this.placeHolders.bottom.css({
            width: width + "px"
        });
    };
    this.isDateInRange = function(data) {
        var restore = this.date.getTime(), result;
        this.date.setDate(data.number);
        if (this.date.getTime() >= this.periodstart.getTime() && this.date.getTime() <= this.periodend.getTime())
            result = true;
        else
            result = false;
        this.date.setTime(restore);
        return result;
    };
    this.renderDay = function(topRow, bottomRow, data) {
        var cssClass = "";
        cssClass += (this.isToday(data.number)) ? "today" : "";
        //we want to allow events only on days between the trip start/end
        cssClass += (this.isDateInRange(data)) ? " event" : "";
        topRow.append("<li><div class=\"" + cssClass + "\">" + data.name + "</div></li>");
        bottomRow.append("<li><div class=\"" + cssClass + "\">" + data.number + "</div></li>");
        nameEl = topRow.find("div:last");
        numbEl = bottomRow.find("div:last");
        if (cssClass.indexOf('event') === -1)
            return;
        var self = this;
        var enterClosure = function(e) {
            self.onMouseEnter(e);
        };
        var leaveClosure = function(e) {
            self.onMouseLeave(e);
        };
        var clickClosure = function(e) {
            $('#newtripinfo').hide();
            $('#uploadphotodiv').hide();

            self.showDayDetails(e);
            //self.redirectDay(e);
        };
        nameEl.bind("mouseenter", data, enterClosure);
        numbEl.bind("mouseenter", data, enterClosure);
        nameEl.bind("mouseleave", data, leaveClosure);
        numbEl.bind("mouseleave", data, leaveClosure);
        nameEl.bind("click", data, clickClosure);
        numbEl.bind("click", data, clickClosure);
    };
    this.redirectDay = function(event) {
        //this.date.setDate(event.data.number);
        window.app.initSpinner();
        $.get('daydetails', {'date': this.date.getTime(), 'tripid': this.tripid}).success(function() {
            window.app.stopSpinner();
            //window.location = "daydetails.jsp";
        });
    };
    this.showDayDetails = function(event) {

        this.date.setDate(event.data.number);

        var infobar = $('#timelineinfo').show(100);
        var self = this;
        if (infobar.css('display') !== 'none') {
            window.app.initSpinner('hero');
            $.get(window.app.TRIPDAY, {'date': self.date.getTime(), 'tripid': self.tripid}).success(function(tripday) {
                self.updateDayForm(tripday);
                window.app.waypoints = []; //clear the waypoints
                self.tripdayid = $('#timelineinfo #tripdayid').val();
                $.get(window.app.WAYPOINT, {'tripid': self.tripid, 'tripdayid': self.tripdayid}).success(function(d) {
                    window.app.stopSpinner();
                    var data = d;
                    var parent = $('#waypointsortable');
                    parent.empty();
                    $.each(data, function(i, waypoint) {
                        var elem = $(Mustache.render(self.WAYPOINTTEMPLATE, waypoint))
                                .appendTo(parent);
                        new google.maps.places.Autocomplete(elem.find('.settingInput2')[0]);
                        //window.app.geocodeAddress(waypoint.location);
                        window.app.waypoints.push({location: waypoint.location, stopover: true});
                    });
                    $('#daystart').trigger('change'); //this updates the map

                });
            });
        }
    };
    this.updateDayForm = function(data) {
        var tripday = data;
        var infobar = $('#timelineinfo');
        infobar.find('#daynum').val(tripday.daynum);
        infobar.find('#daystart').val(tripday.startLocation || '');
        infobar.find('#dayend').val(tripday.endLocation || '');
        infobar.find('#comment').val(tripday.comment || '');
        infobar.find('#tripid').val(tripday.tripid);
        infobar.find('#tripdayid').val(tripday.id);
        infobar.find('#date').val(tripday.date);
        $('#eventtripid').val(tripday.tripid);
        $('#eventtripdayid').val(tripday.id);
        //this is for the photo upload
        $('#phototripdayid').val(tripday.id);
        $('#photoday').val(tripday.date);
    };
    this.setupArrows = function() {
        var dateString = this.monthsOfYear[this.date.getMonth()] + " " + this.date.getFullYear();
        var html = "";
        html += "<div class=\"timeline_lastyear\" title=\"Previous Year\"></div>";
        html += "<div class=\"timeline_lastmonth\" title=\"Previous Month\"></div>";
        html += "<div class=\"timeline_date\">" + dateString + "</div>";
        html += "<div class=\"timeline_nextmonth\" title=\"Next Month\"></div>";
        html += "<div class=\"timeline_nextyear\" title=\"Next Year\"></div>";
        this.placeHolders.arrows.append(html);
        var children = this.placeHolders.arrows.children();
        var self = this;
        $(children[0]).bind("click", this, function() {
            self.previousYear();
        });
        $(children[1]).bind("click", this, function() {
            self.previousMonth();
        });
        $(children[3]).bind("click", this, function() {
            self.nextMonth();
        });
        $(children[4]).bind("click", this, function() {
            self.nextYear();
        });
    };
    this.getEventsForDay = function(dayNumber) {
        var result = [];
        for (var i = 0; i < this.events.length; i++) {
            var e = this.events[i];
            if (e.day === dayNumber && e.month === this.date.getMonth() && e.year === this.date.getFullYear())
                result.push(this.events[i]);
        }
        return result;
    };
    this.setupPlaceHolders = function() {
        var arrows = jQuery(document.createElement("div"));
        arrows.addClass("timeline_arrows");
        var top = jQuery(document.createElement("div"));
        top.addClass("timeline_top");
        var bottom = jQuery(document.createElement("div"));
        bottom.addClass("timeline_bottom");
        top.append("<ul></ul>");
        bottom.append("<ul></ul>");
        this.container.append([arrows[0], top[0], bottom[0]]);
        return {
            arrows: arrows,
            top: top.find("ul:first"),
            bottom: bottom.find("ul:first")
        };
    };
    this.getMonthRepresentation = function() {
        var result = [];
        var numberOfDays = this.getNumberOfDaysInMonth(this.date);
        var firstDay = this.getFirstDayOfMonth(this.date);
        var finished = false;
        for (var i = 0; i < numberOfDays; i++) {
            result.push({
                name: this.weekDays[firstDay].substring(0, 1),
                number: (i + 1 < 10) ? "0" + (i + 1) : (i + 1),
                events: this.getEventsForDay(i + 1)
            });
            firstDay = (firstDay === 6) ? 0 : ++firstDay;
        }
        return result;
    };
    this.getNumberOfDaysInMonth = function(dateObject) {
        var month = dateObject.getMonth();
        if (month === 1) {
            var leapYear = (new Date(dateObject.getYear(), 1, 29).getDate()) === 29;
            if (leapYear)
                return 29;
            else
                return 28;
        } else
            return this.daysPerMonth[month];
    }, this.getFirstDayOfMonth = function(dateObject) {
        var save = dateObject.getDate();
        dateObject.setDate(1);
        var result = dateObject.getDay();
        dateObject.setDate(save);
        return result;
    }, this.isToday = function(dayNumber) {
        var today = new Date();
        return (today.getDate() === dayNumber && today.getFullYear() === this.date.getFullYear() && today.getMonth() === this.date.getMonth());
    }, this.onMouseEnter = function(event) {
        var left = $(event.target).offset().left;
        var width = $(event.target).outerWidth();
        this.bubble.setContent(event.data.events);
        this.bubble.show(left + (width / 2));
    };
    this.onMouseLeave = function(event) {
        this.bubble.hide();
    };
    this.nextMonth = function() {
        this.date.setMonth(this.date.getMonth() + 1);
        this.render();
    };
    this.nextYear = function() {
        this.date.setYear(this.date.getFullYear() + 1);
        this.render();
    };
    this.previousMonth = function() {
        this.date.setMonth(this.date.getMonth() - 1);
        this.render();
    };
    this.previousYear = function() {
        this.date.setYear(this.date.getFullYear() - 1);
        this.render();
    };
    this.initialize();
};
Timeline.Bubble = function(timeline) {
    this.initialize = function() {
        var IE6Class = (timeline.isIE6) ? " bubbleIE6" : "";
        var id = "bubble_" + new Date().getTime();
        var html = "";
        html += "<div id=\"" + id + "\" class=\"timeline_bubble\">";
        html += "<div class=\"bubble_top" + IE6Class + "\"></div>";
        html += "<div class=\"bubble_mid" + IE6Class + "\"></div>";
        html += "<div class=\"bubble_bottom" + IE6Class + "\"></div></div>";
        timeline.container.after(html);
        this.container = $("#" + id);
        this.container.bind("mouseenter", this, this.onMouseEnter);
        this.container.bind("mouseleave", this, this.onMouseLeave);
    };
    this.onMouseEnter = function(event) {
        event.data.stopHiding();
    };
    this.onMouseLeave = function(event) {
        event.data.hide();
    };
    this.stopHiding = function() {
        if (this.goingOffHandle && this.goingOffHandle !== null) {
            clearTimeout(this.goingOffHandle);
            this.goingOffHandle = null;
        }
    };
    this.setContent = function(events) {
        this.stopHiding();
        var midSection = $(this.container.children()[1]);
        midSection.empty();
        var html = "";//"<input type='submit' id='addevent' class='timelineadd'/> ";
        var template = "<div><div title='{{name}}' tripdayid='{{tripdayid}}' eventid={{eventid}} class='event_title'>{{name}}<p class=\"event_data\">{{content}}<br>Location: {{location}}</p></div></div>";
        for (var i = 0; i < events.length; i++)
            $(Mustache.render(template, events[i])).appendTo(midSection);

        //midSection.append(html);
        var titles = midSection.find(".event_title");
        titles.each(function(idx, element) {
            $(element).bind("mouseenter", function(event) {
                $(element).children(":first").animate({
                    opacity: "toggle"
                }, 200);
            });
            $(element).bind("mouseleave", function(event) {
                $(element).children(":first").animate({
                    opacity: "hide"
                }, 200);
            });
            $(element).click(function() {
                $('#eventdescription').val($(this).find('.event_data').text());
                $('#photoeventid').val($(this).attr('eventid'));
                $('#phototripdayid').val($(this).attr('tripdayid'));
                $('#photoday').val($(this).attr('starttime'));
            });
        });

    };

    this.show = function(at) {
        this.container.animate({
            opacity: "show"
        }, 10);
        this.container.animate({
            left: at - (this.container.outerWidth() / 2)
        }, 10);

    };
    this.hide = function() {
        var self = this;
        this.goingOffHandle = setTimeout(function() {
            self.container.animate({
                opacity: "hide"
            }, 10);
        }, 100);
    };
    this.initialize();
};

